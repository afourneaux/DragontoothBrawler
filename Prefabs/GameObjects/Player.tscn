[gd_scene load_steps=11 format=3 uid="uid://cvftqky6unyrj"]

[ext_resource type="FontFile" uid="uid://lf13dwkcg2gj" path="res://Assets/Fonts/Germania_One/GermaniaOne-Regular.ttf" id="1_q0ffi"]
[ext_resource type="SpriteFrames" uid="uid://br601lpl4fjmw" path="res://Assets/Animations/debug_character.tres" id="2_mk6fi"]
[ext_resource type="Texture2D" uid="uid://cgk4syhbk7bha" path="res://Assets/Sprites/blank.bmp" id="3_4s7cu"]

[sub_resource type="GDScript" id="GDScript_7glg2"]
resource_name = "Player"
script/source = "extends CharacterBody2D

signal on_death
signal on_animation_state_change

# TODO: values configurable by character
# Data sheet? Child classes?
const SPEED = 400
const FRICTION = 5
const JUMP_HEIGHT = 800
const FLOATY_FACTOR = 3  # Low for floaty. Adjust JUMP_HEIGHT to balance

const WALLJUMP_FACTOR = 0.8
const WALLJUMP_PUSH = 50

const MAX_HEALTH = 100

var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\") * FLOATY_FACTOR
var is_animation_state_set_this_frame = false
var is_attack_down = false
var is_special_down = false

var player_id = 1:
	set (value):
		player_id = value
		$PlayerInput.set_multiplayer_authority(value)

@onready var input = $PlayerInput

func die():
	on_death.emit(player_id)
	self.queue_free()

func _check_health(health):
	if health <= 0:
		die()

func _ready():
	$Name.text = Server._player_data[name.to_int()][PlayerData.Field.NAME]
	$Status.on_health_changed.connect(_check_health)
	$Status.on_health_changed.connect($Health.show_health)
	$Status.max_health = MAX_HEALTH
	$Status.health = MAX_HEALTH
	set_process(multiplayer.is_server())
	set_physics_process(multiplayer.is_server())


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if input.is_attack_held:
		if is_attack_down:
			attack_held(delta)
		else:
			attack_down()
	else:
		if is_attack_down:
			attack_up()

	if input.is_special_held:
		if is_special_down:
			special_held(delta)
		else:
			special_down()
	else:
		if is_special_down:
			special_up()

	is_attack_down = input.is_attack_held
	is_special_down = input.is_special_held

func _physics_process(delta):
	is_animation_state_set_this_frame = false
	if is_on_wall_only():
		velocity.y = lerpf(velocity.y, 0, delta * FRICTION)
		_set_animation_state(Globals.ANIMATION_STATE.WALLGRAB)

	if not is_on_floor():
		velocity.y += gravity * delta
		if velocity.y > 0:
			_set_animation_state(Globals.ANIMATION_STATE.FALL)
	if input.lr_movement != 0:
		velocity.x = lerpf(velocity.x, input.lr_movement * SPEED, delta)
		_set_animation_state(Globals.ANIMATION_STATE.WALK)
	elif is_on_floor():
		velocity.x = lerpf(velocity.x, 0, delta * FRICTION)
		_set_animation_state(Globals.ANIMATION_STATE.STAND)
	
	if input.is_jumping and is_on_floor():
		velocity.y = -JUMP_HEIGHT
		_set_animation_state(Globals.ANIMATION_STATE.JUMP)
	
	if input.is_jumping and is_on_wall():
		velocity.y = -(JUMP_HEIGHT * WALLJUMP_FACTOR)
		velocity.x = get_wall_normal().x * WALLJUMP_PUSH
		_set_animation_state(Globals.ANIMATION_STATE.JUMP)
	input.is_jumping = false
	
	move_and_slide()

func _set_animation_state(animation_state, force=false):
	if is_animation_state_set_this_frame and not force:
		return
	on_animation_state_change.emit(animation_state)
#	match animation_state:
#		Globals.ANIMATION_STATE.NONE:
#			push_error(\"Animation state NONE provided\")
#		_:
#			push_error(\"Unrecognised animation state\")
	is_animation_state_set_this_frame = true

func attack_down():
	pass

func attack_held(delta):
	pass

func attack_up():
	pass

func special_down():
	pass

func special_held(delta):
	pass

func special_up():
	pass
"

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_3fibl"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath("AnimatedSprite2D:animation")
properties/1/spawn = true
properties/1/replication_mode = 2
properties/2/path = NodePath("AnimatedSprite2D:flip_h")
properties/2/spawn = false
properties/2/replication_mode = 2
properties/3/path = NodePath("AnimatedSprite2D:visible")
properties/3/spawn = false
properties/3/replication_mode = 2
properties/4/path = NodePath("AnimatedSprite2D:modulate")
properties/4/spawn = false
properties/4/replication_mode = 2
properties/5/path = NodePath(".:player_id")
properties/5/spawn = true
properties/5/replication_mode = 0

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_nygse"]
properties/0/path = NodePath(".:lr_movement")
properties/0/spawn = true
properties/0/replication_mode = 1

[sub_resource type="GDScript" id="GDScript_13shx"]
resource_name = "PlayerInput"
script/source = "extends MultiplayerSynchronizer


@export var lr_movement = 0
var is_jumping = false
var is_attack_held = false
var is_special_held = false

var is_mouse_down_left = false
var is_mouse_down_right = false

func _ready():
	set_process(is_multiplayer_authority())

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	lr_movement = 0
	if Input.is_action_pressed(\"move_left\"):
		lr_movement -= 1
	if Input.is_action_pressed(\"move_right\"):
		lr_movement += 1
	if Input.is_action_just_pressed(\"jump\"):
		jump.rpc_id(1)
	if Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT) and is_mouse_down_left == false:
		attack.rpc_id(1, true)
		is_mouse_down_left = true
	elif not Input.is_mouse_button_pressed(MOUSE_BUTTON_LEFT) and is_mouse_down_left == true:
		attack.rpc_id(1, false)
		is_mouse_down_left = false
	if Input.is_mouse_button_pressed(MOUSE_BUTTON_RIGHT) and is_mouse_down_right == false:
		special.rpc_id(1, true)
		is_mouse_down_right = true
	elif not Input.is_mouse_button_pressed(MOUSE_BUTTON_RIGHT) and is_mouse_down_right == true:
		special.rpc_id(1, false)
		is_mouse_down_right = false
	

@rpc(\"call_local\")
func jump():
	is_jumping = true

@rpc(\"call_local\")
func attack(is_held: bool):
	is_attack_held = is_held

@rpc(\"call_local\")
func special(is_held: bool):
	is_special_held = is_held
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_s81vj"]
size = Vector2(16, 16)

[sub_resource type="GDScript" id="GDScript_uv86y"]
resource_name = "PlayerStatus"
script/source = "extends Node

signal on_health_changed

var max_health: int

var health: int:
	set(value):
		health = value
		if health > max_health:
			health = max_health
		on_health_changed.emit(health)

# Called when the node enters the scene tree for the first time.
func _ready():
	pass


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
"

[sub_resource type="GDScript" id="GDScript_2ebey"]
resource_name = "HealthBar"
script/source = "extends TextureProgressBar

const MAX_VISIBILITY = 0.9
const VISIBILITY_CHANGE_SPEED = 1
const VISIBILITY_CHANGE_DELAY = 3
var visibility_change_timer = 0
var current_visibility = 0

func show_health(new_value):
	value = new_value
	current_visibility = MAX_VISIBILITY
	visibility_change_timer = 0

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if current_visibility > 0:
		visibility_change_timer += delta
		if visibility_change_timer >= VISIBILITY_CHANGE_DELAY:
			current_visibility = max(
				current_visibility - (delta * VISIBILITY_CHANGE_SPEED), 0)
	modulate.a = current_visibility
"

[node name="Player" type="CharacterBody2D"]
script = SubResource("GDScript_7glg2")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_3fibl")

[node name="PlayerInput" type="MultiplayerSynchronizer" parent="."]
root_path = NodePath(".")
replication_config = SubResource("SceneReplicationConfig_nygse")
script = SubResource("GDScript_13shx")

[node name="Name" type="Label" parent="."]
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -36.5
offset_top = -50.0
offset_right = 36.5
offset_bottom = -27.0
grow_horizontal = 2
grow_vertical = 0
theme_override_fonts/font = ExtResource("1_q0ffi")
text = "TEXT_NAME"
horizontal_alignment = 1
vertical_alignment = 1

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
scale = Vector2(1, 2)
sprite_frames = ExtResource("2_mk6fi")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(1, 2)
shape = SubResource("RectangleShape2D_s81vj")

[node name="Status" type="Node" parent="."]
script = SubResource("GDScript_uv86y")

[node name="Health" type="TextureProgressBar" parent="."]
modulate = Color(1, 1, 1, 0.588235)
custom_minimum_size = Vector2(75, 10)
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -37.5
offset_top = -27.5
offset_right = 37.5
offset_bottom = -17.5
grow_horizontal = 2
grow_vertical = 0
nine_patch_stretch = true
texture_under = ExtResource("3_4s7cu")
texture_progress = ExtResource("3_4s7cu")
tint_under = Color(1, 0, 0, 1)
tint_progress = Color(0, 0.419608, 0, 1)
script = SubResource("GDScript_2ebey")
