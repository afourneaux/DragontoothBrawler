[gd_scene load_steps=13 format=3 uid="uid://0wex2qtmiq8u"]

[ext_resource type="PackedScene" uid="uid://b0hfhk0ny8nep" path="res://Prefabs/Components/PlayerInputComponent.tscn" id="1_e6jwv"]
[ext_resource type="PackedScene" uid="uid://dogjjojbtqi3f" path="res://Prefabs/Components/NameTagComponent.tscn" id="2_6x3q0"]
[ext_resource type="PackedScene" uid="uid://crfuirdfdicw1" path="res://Prefabs/Components/CharacterAnimatorComponent.tscn" id="3_6gses"]
[ext_resource type="PackedScene" uid="uid://fegiokc44mma" path="res://Prefabs/Components/HealthComponent.tscn" id="4_roq2t"]
[ext_resource type="PackedScene" uid="uid://bo84muemnq4jy" path="res://Prefabs/Components/HealthBarComponent.tscn" id="5_kopnm"]
[ext_resource type="PackedScene" uid="uid://bh8uj1angqxep" path="res://Prefabs/Components/CharacterIDComponent.tscn" id="6_hf3ny"]
[ext_resource type="Texture2D" uid="uid://dtxla57etuy1j" path="res://Assets/Sprites/invalid.bmp" id="7_ekvhp"]

[sub_resource type="GDScript" id="GDScript_7glg2"]
resource_name = "Player"
script/source = "extends CharacterBody2D

signal on_death
signal on_animation_state_change

@export var input: Node
var weapons_node: Node

const SPEED = 400
const FRICTION = 5
const JUMP_HEIGHT = 800
const FLOATY_FACTOR = 3  # Low for floaty. Adjust JUMP_HEIGHT to balance

const WALLJUMP_FACTOR = 0.8
const WALLJUMP_PUSH = 50

var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\") * FLOATY_FACTOR
var is_animation_state_set_this_frame = false
var is_attack_down = false
var is_special_down = false

var player_id = 1:
	set (value):
		player_id = value
		input.set_multiplayer_authority(value)

func die():
	on_death.emit(player_id)
	self.queue_free()

func _check_health(health):
	if health <= 0:
		die()

func _ready():
	set_physics_process(multiplayer.is_server())

func _physics_process(delta):
	is_animation_state_set_this_frame = false
	if is_on_wall_only():
		velocity.y = lerpf(velocity.y, 0, delta * FRICTION)
		_set_animation_state(Globals.ANIMATION_STATE.WALLGRAB)

	if not is_on_floor():
		velocity.y += gravity * delta
		if velocity.y > 0:
			_set_animation_state(Globals.ANIMATION_STATE.FALL)
	if input.lr_movement != 0:
		velocity.x = lerpf(velocity.x, input.lr_movement * SPEED, delta)
		_set_animation_state(Globals.ANIMATION_STATE.WALK)
	elif is_on_floor():
		velocity.x = lerpf(velocity.x, 0, delta * FRICTION)
		_set_animation_state(Globals.ANIMATION_STATE.STAND)
	
	move_and_slide()

func jump():
	if is_on_floor():
		velocity.y = -JUMP_HEIGHT
		_set_animation_state(Globals.ANIMATION_STATE.JUMP)
	elif is_on_wall():
		velocity.y = -(JUMP_HEIGHT * WALLJUMP_FACTOR)
		velocity.x = get_wall_normal().x * WALLJUMP_PUSH
		_set_animation_state(Globals.ANIMATION_STATE.JUMP)

func _set_animation_state(animation_state, force=false):
	if is_animation_state_set_this_frame and not force:
		return
	on_animation_state_change.emit(animation_state)
#	match animation_state:
#		Globals.ANIMATION_STATE.NONE:
#			push_error(\"Animation state NONE provided\")
#		_:
#			push_error(\"Unrecognised animation state\")
	is_animation_state_set_this_frame = true
"

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_3fibl"]
properties/0/path = NodePath(".:position")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath("AnimatedSprite2D:animation")
properties/1/spawn = true
properties/1/replication_mode = 2
properties/2/path = NodePath("AnimatedSprite2D:flip_h")
properties/2/spawn = false
properties/2/replication_mode = 2
properties/3/path = NodePath("AnimatedSprite2D:visible")
properties/3/spawn = false
properties/3/replication_mode = 2
properties/4/path = NodePath("AnimatedSprite2D:modulate")
properties/4/spawn = false
properties/4/replication_mode = 2
properties/5/path = NodePath(".:player_id")
properties/5/spawn = true
properties/5/replication_mode = 2
properties/6/path = NodePath("DEBUGICON:position")
properties/6/spawn = true
properties/6/replication_mode = 1
properties/7/path = NodePath("Health:health")
properties/7/spawn = false
properties/7/replication_mode = 2
properties/8/path = NodePath("CharacterID:value")
properties/8/spawn = false
properties/8/replication_mode = 2

[sub_resource type="RectangleShape2D" id="RectangleShape2D_s81vj"]
size = Vector2(16, 16)

[sub_resource type="GDScript" id="GDScript_7domr"]
script/source = "extends Sprite2D

@export var player_input: MultiplayerSynchronizer

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	global_position = player_input.mouse_position
"

[sub_resource type="GDScript" id="GDScript_ipx5j"]
resource_name = "Spellblast"
script/source = "extends Node2D

@export var input: Node

var orb_prefab = preload(\"res://Prefabs/GameObjects/Projectiles/orb.tscn\")

const COOLDOWN = 3
const SPAWN_DISTANCE = 10

var cooldown_timer = 0


func _process(delta):
	if cooldown_timer >= 0:
		cooldown_timer -= delta

func fire():
	if cooldown_timer >= 0:
		return
	cooldown_timer = COOLDOWN
	var orb = orb_prefab.instantiate()
	var mouse_normal = (input.mouse_position - global_position).normalized()
	orb.position = global_position + mouse_normal * SPAWN_DISTANCE
	orb.rotation = mouse_normal.angle()
	orb.player_id = get_parent().player_id
	get_parent().weapons_node.add_child(orb, true)
"

[node name="Simfir" type="CharacterBody2D" node_paths=PackedStringArray("input") groups=["Player"]]
script = SubResource("GDScript_7glg2")
input = NodePath("PlayerInput")

[node name="ServerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_3fibl")

[node name="PlayerInput" parent="." instance=ExtResource("1_e6jwv")]

[node name="Name" parent="." instance=ExtResource("2_6x3q0")]

[node name="AnimatedSprite2D" parent="." instance=ExtResource("3_6gses")]

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2(1, 2)
shape = SubResource("RectangleShape2D_s81vj")

[node name="Health" parent="." node_paths=PackedStringArray("character_id") instance=ExtResource("4_roq2t")]
character_id = NodePath("../CharacterID")

[node name="HealthBar" parent="." node_paths=PackedStringArray("health_component") instance=ExtResource("5_kopnm")]
health_component = NodePath("../Health")

[node name="CharacterID" parent="." instance=ExtResource("6_hf3ny")]
value = 8

[node name="DEBUGICON" type="Sprite2D" parent="." node_paths=PackedStringArray("player_input")]
texture = ExtResource("7_ekvhp")
script = SubResource("GDScript_7domr")
player_input = NodePath("../PlayerInput")

[node name="Spellblast" type="Node2D" parent="." node_paths=PackedStringArray("input")]
script = SubResource("GDScript_ipx5j")
input = NodePath("../PlayerInput")

[connection signal="on_attack_down" from="PlayerInput" to="Spellblast" method="fire"]
[connection signal="on_jump_pressed" from="PlayerInput" to="." method="jump"]
[connection signal="on_health_changed" from="Health" to="." method="_check_health"]
